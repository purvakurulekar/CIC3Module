//=========================================================================
/**
 * 2020 Content in Cloud RunTime Client API
 */
/// <reference path="./interfaces/Catalog.d.ts" />
/// <reference path="./interfaces/Item.d.ts" />
/// <reference path="./interfaces/ItemConfiguration.d.ts" />
/// <reference path="./interfaces/Pricing.d.ts" />
/// <reference path="./interfaces/Caching.d.ts" />
/// <reference path="./interfaces/Logging.d.ts" />
/// <reference path="./interfaces/System.d.ts" />
/// <reference path="./interfaces/Cache.d.ts" />
/// <reference path="./interfaces/ItemUpdate.d.ts" />

//=============================================================================
/** CiCAPI is a global on the window. */
declare var CiCAPI: ICiCAPI;

//=============================================================================
/**
 * The interface for the CIC API.
 */
declare interface ICiCAPI {
    /**
     * The init method.
     * @param configOverride - the config override.
     * @param options - the options for starting the API.
    */
    init(
        configOverride?: string | object,
        options?: ICiCAPIInitOptions
    ): Promise<void>;

    /**The content API.*/
    content: IContentAPI;

    /**The cache API.*/
    cache: ICacheAPI;

    /**The log API.*/
    log: ILogAPI;

    /**The API version number.*/
    readonly version: string;

    /** Returns an API Handle tagged with specified requester id */
    getAPIHandle(requesterId: string): ICiCAPI;

    /** the current requester id of this handle */
    /** @internal */
    requesterId?: string;

    /** @internal */
    resetConfigs(overrideConfig?: string | IConfig, force?: boolean): Promise<void>;
    /** @internal */
    getConfig(configPath: string): ConfigValue;
    /** @internal */
    setConfig(configPath: string, valueToSet: ConfigValue): Promise<void>;
}

//=============================================================================
/**
 * Collection of methods used to access catalogs and their related items from the 2020 Content Platform. The interface methods are stateless and underlying caches are transparent.
 */
interface IContentAPI {
    /**
     * Gets the list of catalogs currently available considering the current entitlement context.
     * @param options - the options for search for catalogs.
     * @returns This returns the list of catalogs and their related information.
    */
    getCatalogs(options?: IOptionsGetCatalogs): Promise<Array<ICatalog>>;

    /**
     * Gets information regarding a specific catalog.
     * @param catalogId - the id of the catalog.
     * @returns This returns the requested catalog.
    */
    getCatalog(catalogId: string): Promise<ICatalog | null>;

    /**
     * Gets the list of item groups related to a specific catalog. These item groups can be used to browse the items of the catalog (see searchItems API).
     * @param catalogId - the id of the catalog.
     * @param options - the options for filtering the catalog item groups.
     * @returns This returns the list of catalog item groups found.
    */
    getCatalogGroups(catalogId: string, options?: IOptionsGetCatalogGroups): Promise<Array<ICatalogGroup>>;
    // TODO:
    // rename to getCatalogItemGroups(catalogId: string, options?: IOptionsGetCatalogGroups): Promise<Array<IItemGroup>>;

    /**
     * Search for items across all catalogs or within specific catalogs.
     * @param searchText - searching text to use.
     * @param options - the options for searching for items.
     * @returns This returns the list of items found.
    */
    searchItems(searchText: string, options: IOptionsSearchItems): Promise<ISearchItemsResult>;

    /**
     * Gets the details relating to a specific variant of an item. A variant represents an item in a given configuration state.
     * @param itemId - the id of the item (unique across all catalogs).
     * @param configurationState - the configuration state of the item. If none is supplied, the information returned will correspond to that of the item in the default state defined by its catalog context.
     * @param options - the options for getting an itemVariant
     * @returns This returns the information relating to the specified item with the given configuration state.
     */
    getItemVariant(itemId: string, configurationState?: IConfigurationState, options?: IOptionsGetItemVariant): Promise<IItemVariant | void>;

    /**
     * Gets the geometry for an item in a given configuration state.
     * @param itemId - the id of the item (unique across all catalogs).
     * @param configurationState - the configuration state of item. If none is supplied, the geometry returned will correspond to that of the item in the default state defined by its catalog context.
     * @param options - the options for getting geometry.
     * @returns This returns the geometry for the specified item with the configuration state applied (in GLB format). See glTF specification: https://www.khronos.org/registry/glTF/specs/2.0/glTF-2.0.html.
    */
    getItemGeometry(itemId: string, configurationState?: IConfigurationState, options?: IOptionsGetItemGeometry): Promise<GLB | void>;

    /**
     * Gets the features of a given item. Where "features" represent the a list of things that can be changed or configured on an item.
     * @param itemId - the id of the item (unique across all catalogs).
     * @param configurationState - the configuration state of item. If none is supplied, the features returned will correspond to that of the item in the default state defined by its catalog context.
     * @param options - the options for getting the items features.
     * @returns This returns the list of features for the specified item with the given configuration state.
    */
    getItemFeatures(itemId: string, configurationState?: IConfigurationState, options?: IOptionsGetItemFeatures): Promise<Array<IFeature>>;

    /**
     * Gets the options for a given feature of an item. Where "options" represent the possible choices (or range of values) available for the specified feature.
     * @param itemId - the id of the item (unique across all catalogs).
     * @param featureId - the feature id. (see getItemFeatures)
     * @param configurationState - the configuration state of the item. If none is supplied, the features returned will correspond to that of the item in the default state defined by its catalog context.
     * @param options - the options for getting options.
     * @returns This returns the list of options and option groups for the specifed feature, item and configuration state.
    */
    getItemFeatureOptions(itemId: string, featureId: string, configurationState: IConfigurationState, options?: IOptionsGetItemFeatureOptions): Promise<IGetItemFeatureOptionsResult | undefined>;

    /**
     * Determines the impact of setting a specific option on a given feature of an item. The function validates the desired change and returns the resulting ItemVariant along with a summary of the applied changes. 
     * @param itemId - the id of the item (unique across all catalogs).
     * @param currentConfigurationState - the items current configuration state.
     * @param optionSelections - the options to select.
     * @returns This returns the result for setting the option for the feature.
    */
    setItemFeatureOptions(itemId: string, currentConfigurationState: IConfigurationState, optionSelections: Array<IFeatureState>): Promise<IItemConfigurationResult | null>;

    /**
     * For a given list of items in given configuration states, this method determines if specific updates are required depending on changes in the related catalog versions. 
     * @param items - the array of items to create the report on.
     * @returns This returns the item update report.
    */
    getItemUpdateReport(items: Array<IClientItem>): Promise<IItemUpdateReport>;

     /**
     * Gets the item pricing report.
     * @param items - the array of items.
     * @param options - the options for getting the item price report.
     * @returns This returns the price report for the requested items.
    */
    getItemPricingReport(items: Array<IClientItem>, options?: IOptionsGetItemPricingReport): Promise<IItemPricingReport | undefined>;

    /** @ignore */
    constants: IContentConstants;
    /** @ignore */
    registerToChanges(func: Function): void;
    /** @ignore */
    unregisterToChanges(func: Function): void;
}

//=============================================================================
/**
 * The interface for the cache API.
 */
interface ICacheAPI {
    /**
     * Clears the cache specified by identifier, all if none specified.
    */
    clearCache(identifier?: string): void

    /**
     * Gets the cache size.
     * @returns This returns the cache size.
    */
    getCacheSize(): number;

    /**
     * Gets the number of cached entries.
     * @returns This returns the number of cached entries.
    */
    getNbCachedEntries(): number;
    

    /**
     * Gets statistics about cached data.
     */
    getCacheStats(): ICacheEngineStats


    /** 
    * Register to changes in the log.
    * @param func - The function to call when there are changes in the log.
    **/
    /** @ignore */
    registerToChanges(func: Function): void;

    /** 
    * Unregister to changes in the log.
    * @param func - The function to remove from the list to call when there are changes in the log.
    **/
    /** @ignore */
    unregisterToChanges(func: Function): void;
}



//=============================================================================
/**
 * The interface for the log API.
 */
interface ILogAPI {
    /**
     * The logger constants.
    */
    constants: ILogAPIConstants;

    /**
     * Gets the logger count
     * @returns This returns the logger count.
    */
    getCount(): number;

    /**
     * Gets the list of log entries.
     * @param type - the log type to check.
     * @param nbLogs - the number of log per page.
     * @param offset - the offset to use.
     * @returns This returns the lisg of specified log entries.
    */
    listEntries(type?: LOG_TYPE_ENUM, nbLogs?: number, offset?: number): Array<ILogEntry>;

    /**
     * Sets the logger stats
     * @returns This returns the logger stats object.
    */
    getStats(): ILoggerStats;

    /**
     * Resets the logger.
    */
    reset(): void;

    /** @ignore */
    registerToChanges(func: Function): void;

    /** @ignore */
    unregisterToChanges(func: Function): void;
}
