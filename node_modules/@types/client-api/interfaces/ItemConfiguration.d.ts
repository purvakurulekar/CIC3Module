/**
 * Interface used to interact with an item's configuration state
 */
type IConfigurationState = Array<IFeatureState>;
    // TBD: Should use interface instead to be consistent with other types?
    // interface IConfigurationState {
    //    featureStates: Array<IFeatureState>;
    // }

/**
 * Interface used to interact with a feature's configuration state
 */
interface IFeatureState {
    /**The feature id.*/
    featureId: string;

    /**The option id.*/
    optionId: string;

    /**The value.*/
    value?: number;

    /** @ignore
    * Associated list of feature types.*/
    types?: Array<string>;
}

/**
 * Feature Group definition
 */
 interface IFeatureGroup {
    /**The id.*/
    id: string;

    /**The name.*/
    name?: string;

    /**Whether it is visible.*/
    isVisible?: boolean;

    /**The list of features.*/
    features: Array<IFeature>;

    /**The list of feature groups.*/
    featureGroups: Array<IFeatureGroup>;
}

/**
 * The interface for the feature.
 */
interface IFeature {
    /**The id.*/
    id: string;

    /** @ignore
     * The code.*/
    code: string;

    /** @ignore
     * The path.*/
    path: string;

    /**The name.*/
    name: string;

    /** @ignore
     * The list of feature options/feature option groups.*/
    options?: Array<IFeatureOption>;

    /**The list of type flags. Values comes from type IFeatureTypes */
    types?: Array<string>;

    /**The default option.*/
    defaultOption?: IFeatureOption;

    /**The selected option.*/
    selectedOption?: IFeatureOption;

    /** @ignore
     * Whether it is optional.*/
    isOptional?: boolean;

    /** @ignore
     * Whether it is default.*/
    isDefault?: boolean;

    /** @ignore
     * Whether it is configurable.*/
    isConfigurable?: boolean;

    /**The numerical information.*/
    numericalInfos?: INumericalInfos;   
    
    /**The list of tags.*/
    tags?: Array<string>;
}


/**
 * The interface for the feature option.
 */
interface IFeatureOption {
    /**The id from the catalog.*/
    id: string,

    /**The name of the feature.*/
    name: string,

    /**The current value of the feature.*/
    value?: number | string,

    /**The image reference for the option.*/
    image?: IImageRef,

    /**The sequence factor number for where this feature is in the list.*/
    sequenceFactor?: number
}

/**
 * The interface for the feature option group.
 */
interface IFeatureOptionGroup {
    /**The id.*/
    id: string,

    /**The name.*/
    name: string,

    /**The image reference for the option.*/
    image?: IImageRef,

    /**The list of feature options.*/
    options?: Array<IFeatureOption>,

    /**The list of sub option groups.*/
    optionGroups?: Array<IFeatureOptionGroup>

    /**The sequence factor number for where this feature is in the list.*/
    sequenceFactor?: number    
}

/**
 * The interface for the numerical information.
 */
interface INumericalInfos {
    /**The default value.*/
    DefaultValue: number,

    /**The maximum value.*/
    MaxValue: number,

    /**The minimum value.*/
    MinValue: number,

    /** @ignore
     * The unit of measurement.*/
    UOMCode: string

    /**The current value.*/
    Value: number
}

/**
 * The interface for the item configuration change.
 */
interface IConfigurationChange {
    /**The feature state.*/
    state: IFeatureState;

    /**The configuration context.*/
    context: CONFIGURATION_CONTEXT;

    /**The context id.*/
    contextId: string;

    /**The change type.*/
    type: CHANGE_REASON;
}

/**
 * The enum for the configuration context.
 */
declare enum CONFIGURATION_CONTEXT {
    /** This is a catalog level context.
     * Enum entry 0.*/
    Catalog,

    /** This is a item level context.
     * Enum entry 1.*/
    Item,

    /** This is a feature level context.
     * Enum entry 2.*/
    Feature,

    /** This is a option level context.
     * Enum entry 3.*/
    Option,

    /** This is a restriction level context.
     * Enum entry 4.*/
    Restriction,

    /** This is a condition level context.
     * Enum entry 5.*/
    Condition
}

/**
 * The enum for the deselection reason.
 */
 declare enum CHANGE_REASON {

    /**
     * The removal of the configuration was asked by the user (default reason)
     * Enum entry 0.
     */
    RequestedByUser,

    /**
     * Configuration value was not possible according to catalog rules
     * Enum entry 1.
     */
    RestrictedByRules,

    /**
     * Item could not be found.
     * Enum entry 2.
     */
    ItemNotFound,

    /**
     * Feature could not be found.
     * Enum entry 3.
     */
    FeatureNotFound,
    
    /**
     * Default option could not be found on a feature that is mandatory.
     * Enum entry 4.
     */
    NoDefaultOptionForMandatoryFeature,

    /**
     * Specified non-numerical value is not valid for its validation constrains
     * Enum entry 5.
     */
    InvalidValue,

    /**
     * Specified numerical value is below the acceptable minimum value.
     * Enum entry 6.
     */
    BelowMinimum,

    /**
     * Specified numerical value is above the acceptable maximum value.
     * Enum entry 7.
     */
    AboveMaximum,

    /**
     * Specified numerical value do not conform to valid increments.
     * Enum entry 8.
     */
    InvalidIncrement,

    /**
     * A duplicate entry was found were it is not allowed.
     * Enum entry 9.
     */
    DuplicateFound,

    /**
     * The error occurred during the evaluation of a condition script (malformed condition).
     * Enum entry 10.
     */
    SyntaxError,

    /**
     * Selection was automated by the system as a default selection on item placement
     * * Enum entry 11.
     */
    DefaultOptionSelection,

    /**
     * Selection was automated after being removed by restriction rules
     * Enum entry 12.
     */
    ReSelection
}

/**
 * Response for the GetItemFeatureOptions API call
 */
interface IGetItemFeatureOptionsResult {
    /**
     * List of options at root level
     */
    options?: Array<IFeatureOption>;

    /**
     * List of option groups at root level
     */
    groups?: Array<IFeatureOptionGroup>;
}

/**
 * The interface for the item configuration result.
 */
interface IItemConfigurationResult {
    /**The configured item variant.*/
    itemVariant: IItemVariant;

    /**The list of applied changes; both selected and deselected features.*/
    appliedChanges: Array<IConfigurationChange>;
}

/**
 * The interface for the options for the api GetItemFeatures().
 */
 interface IOptionsGetItemFeatures {
    /**Whether to include the selected option for each feature; this is true by default.*/
    includeSelectedOption: boolean;

    /**Whether to fill each feature's 'expectedNbOptions' member at the cost of performance.*/
    fillExpectedNbOptionsMember?: boolean;
}

/**
 * The interface for the options for the api GetItemFeatureOptions().
 */
interface IOptionsGetItemFeatureOptions {
    /**Whether to include invalid options in the returned list; this is false by default.*/
    includeInvalidOptions?: boolean;
}