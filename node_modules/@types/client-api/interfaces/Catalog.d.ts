/**
 * The return interface for a catalog.
 */
interface ICatalog {
    /**The id for the catalog.*/
    id: string,

    /**The code for the catalog.*/
    code: string

    /**The name of the catalog.*/
    name: string,

    /**The version of the catalog (e.g. 1.1.0.0).*/
    version: string,

    /**The status of the catalog.*/
    status: CATALOG_STATUS,

    /**The company reference for the catalog.*/
    companyRefCode: string,

    /**The measurement system used in the catalog.*/
    measurementSystem: string,

    /**The localization object for the catalog.*/
    localization: ILocalization,

    /**The last updated date for the catalog.*/
    updatedDate: string,

    /**The Description, duh!, optional.*/
    description?: string,

    /**Catalog Image, optional.*/
    image?: IImageRef,

    /**Catalog Alternate Images, optional.*/
    altImages?: Array<IImageRef>
}

/**
 * The interface for groups in a catalog.
 */
interface ICatalogGroup {
    /**The code for the group.*/
    code: string,

    /**The name for the group.*/
    name: string,

    /**Group Image.*/
    image?: IImageRef,

    /**Whether the group is visible.*/
    visible: boolean,

    /**The list of subgroups for this group.*/
    groups?: Array<ICatalogGroup>

    /**The sequence factor number for where this group is in the list.*/
    sequenceFactor?: number
}

/**
 * The enums for catalog status.
 */
declare enum CATALOG_STATUS {
    /**Enum entry 0.*/
    ACTIVATED = "Activated",

    /**Enum entry 1.*/
    INPROGRESS = "InProgress",

    /**Enum entry 2.*/
	READY = "Ready",

    /**Enum entry 3.*/
	DEACTIVATED = "Deactivated",

    /**Enum entry 4.*/
    DELETED = "Deleted"
}

/**
 * The options interface for getCatalogs().
 */
interface IOptionsGetCatalogs {
    /**The list of catalog statuses to use for the search.*/
    catalogStatuses?: Array<CATALOG_STATUS>,

    /**The list of catalog types to search for.*/
    catalogTypes?: Array<string>,

    /**The list of companyIds to use for searching.*/
    companyIds?: Array<string>,

    /**Whether to only return the latest versions of catalogs.*/
    latestVersionsOnly?: boolean
}

/**
 * The options interface for getCatalogGroups().
 */
interface IOptionsGetCatalogGroups {
    /**Whether to only return visible groups.*/
    visibleOnly?: boolean
}

/**
 * The localization interface.
 */
interface ILocalization {
    /**The default locale for the catalog, this is always 'en-US'.*/
    default: string,

    /**The list of locales available for this catalog.*/
    locales: Array<string>
}