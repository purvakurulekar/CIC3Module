/**
 * The return interface for searchItem()
 */
interface ISearchItemsResult {
    /**The total number of results.*/
    total: number,

    /**The number results per pages.*/
    nbPerPage: number,

    /**The number of pages to offset by.*/
    offset: number,

    /**The list of items returned.*/
    items: Array<IItem>
}

/**
 * The interface for IItemBase.
 */
 interface IItemBase {
    /**Unique identifier of the item. This id is unique across all catalogs. It can be persisted (includes the catalog version context). */
    id: string,

    /** @ignore */
    code?: string, // TO REVIEW: should this be excluded from the public API

    /**Primary name of the item. This string is localized based on the current locale.*/
    name: string,

    /**Object containing extensible set of localized descriptions providing more detailed information regarding this item.*/
    descriptions?: IDescriptions,

    /**Principal image representing this item. Typically used as the primary image (thumbnail) in the context of browsing or searching. */
    image?: IImageRef,    
    
    /**List of alternative images of this item.*/
    altImages?: Array<IImageRef>,

    /**The main dimensions of the item (width/height/depth). Typically these correspond to the exact space that will be occupied by the item in the design. */
    dimensions?: Dimensions,   
    
    /**External codes used in various integration contexts (e.g. for pricing or stock check services). The list of possible codes is extensible.*/
    externalCodes?: IExternalCodes, 
    
    /**Item classification information. Used to inform about the nature of the item (e.g. is it a chair or a cabinet or etc.) (Normalized. See prior work on 2020's ItemType 2.0). */
    classification?: IClassification,  
    
    /**The id of the specific catalog version that this item comes from.*/
    catalogId: string,

    /**The group references for this item. */
    groupRefs?: Array<string>,

    /**Whether the item should be shown to general end-users. Invisible items typically represent internal parts used within assemblies (not ussually accesible directly to designers).*/
    visible: boolean,

    /** @ignore */
    tags?: Array<string>, // TO REVIEW: Doesn't exist in backend
}

/**
 * The interface for IItem, which is returned by searchItem().
 * This extends the properties in IItemBase.
 */
interface IItem extends IItemBase {
    /**A list of proposed variants of this item (e.g. by size or by color). These are not necessarily the full set of variants... just a subset of popular ones.*/
    variantProposals?: Array<IItemVariantProposal>
}

/**
 * The interface for IItemVariantProposal.
 * This extends the properties in IItemBase.
 */
interface IItemVariantProposal  extends IItemBase {
    /**The propose configuration state for this variant.*/
    proposedConfigurationState?: IConfigurationState,
}

/**
 * The interface for IItemVariant, which is what is returned by getItemVariant().
 * This extends the properties in IItemBase.
 */
interface IItemVariant extends IItemBase {
    /**The configuration state.*/
    configurationState?: IConfigurationState,

    /**The list of sub items.*/
    subItems?: Array<IItemVariant>,

    /**The list of resolved attributes for this variant */
    attributes?: Array<IAttribute>,
    
    /** @ignore
    *Used only for setting a UUID for a product when passing it back.*/
    uuid?: string,

     /** @ignore */
    //THIS IS TEMPORARY
    selected?: boolean,

    /** @ignore */
    //THIS IS TEMPORARY
    position?: Vector3,

    /** @ignore */
    //THIS IS TEMPORARY
    orientation?: Vector3
}


/**
 * The options interface for getItemVariant().
 */
interface IOptionsGetItemVariant {
    rootOnly?: boolean
}


/**
 * An attribute that was resolved during instantiation of an item variant
 */
interface IAttribute {
    /**
     * Code of the attribute
     */
    code: string,

    /**
     * Value of the attribute
     */
    value: string | number | boolean | undefined,

    /**
     * Localised name of the attribute
     */
    name?: string,
    
    /**
     * Localised description of the attribute
     */
    description?: string
}


/**
 * The options interface for searchItem().
 */
interface IOptionsSearchItems { 
    /**The list of catalog Ids to search with.*/
    catalogIds?: Array<string>, 

    /**The list of group references to search with.*/
    groupRefs?: Array<string>,   

    /**The search classifications object.*/
    classifications?: ISearchClassifications,

    /**Whether to only return visible items.*/
    visibleOnly?: boolean 
    
    /**Whether to only return the latest versions of items.*/
    latestVersionsOnly?: boolean 

    /**The number of products to return in one call, can't be larger than 100.*/
    nbPerPage?: number,  
    
    /**The product offset to use.*/
    offset?: number,         
}

/**
 * The interface for searching for classifications.
 */
interface ISearchClassifications {
    /**The list of full item types to filter by.*/
    fullItemTypes?: Array<string>,

    /**The list of base item types to filter by.*/
    baseItemTypes?: Array<string>,

    /**The list of characteristsics to filter by.*/
    characteristics?: Array<string>
}

/**
 * The options interface for getItemGeometry().
 */
interface IOptionsGetItemGeometry {
    /**Whether to return embeded images, it is true by default.*/
    embedImages?: boolean
}

/**
 * The type interface for dimensions as numeric values.
 */
type Dimensions = {
    width?: number,
    depth?: number,
    height?: number,
    measurementUnits?: string // m, cm, mm, inches, 2032s 
}

/**
 * @ignore
 * TO REVIEW - Should be moved to desktop service types.
 * The type interface for dimensions as string.
 */
type DimensionsStr = {
    width?: string,
    depth?: string,
    height?: string
}

/**
 * The interface for external codes.
 */
interface IExternalCodes {
    [key: string]: string
    // sku: string,
    // ean: string,
    // env: string
    // manuf: string
}

/**
 * The interface for descriptions.
 */
interface IDescriptions {
    /**The long description.*/
    long: string,

    /**The short description.*/
    short: string,

    /**The more information URI.*/
    moreInfoUri?: string,

    /**The default description.*/
    default?: string
}

/**
 * The interface for image references.
 */
interface IImageRef {
    /**The size of the image.*/
    size?: string,

    /**The list of tags.*/
    tags?: Array<string>,

    /**The uri.*/
    uri: string
}

/**
 * The interface for the classifications.
 */
interface IClassification {
     /**The base item type.*/
    baseItemType: string,

     /**The characteristics.*/
    characteristics: ICharacteristics,

     /**The full item type (the same as CiC2).*/
    fullItemType: string
}

/**
 * The interface for the characteristics.
 */
interface ICharacteristics {
    [key: string]: string
    // CabinetCategory: string,
    // CabinetExpression: string,
    // CabinetFunction: string,
    // CabinetLocation: string,
    // CabinetShape: string,
    // RoomType: string
}

/**
 * The interface for providing an item from the client.
 */
interface IClientItem {
    /**The item id.*/
    itemId: string,

    /**The current configuration state.*/
    configurationState?: IConfigurationState,

    /**The unique instance id created by the client for the item.*/
    instanceId?: string
}

// These are going to be discussed and likely moved to a different project!
// TO REVIEW: This declaration (and IAPIOptions) relates to Design Engine functionality. Does this belong in Content API?
/** @ignore */
interface IAddItemOptions extends IAPIOOptions {
    position?: Vector3Str,
    select?: boolean,
    orientation?: Vector3Str
}

/** @ignore */
interface IAPIOOptions {
    designState?: string
}

// TO REVIEW: This declaration relates to Design Engine functionality. Does this belong in Content API?
/** @ignore */
interface IItemPose {
    itemInstanceId: string,
    position?: Vector3,
    orientation?: Vector3
}


/**
 * The type for a vector3.
 */
type Vector3 = Float32Array;

/**
 * The type for a vector3 in strings.
 */
type Vector3Str = Array<string>;

/**
 * The type for a GLB.
 */
type GLB = ArrayBuffer;
